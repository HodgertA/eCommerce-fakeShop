service: eCommerce-backend

provider:
  name: aws
  runtime: nodejs14.x
  region: ca-central-1
  lambdaHashingVersion: "20201221"
  environment: 
    ECOMMERCE_TABLE_NAME: "eCommerce-table"
    USERPOOL_TABLE_NAME: "user-table"
    ACCESS_TOKEN_SECRET: ${file(./config.yml):ACCESS_TOKEN_SECRET}
    STRIPE_SECRET_KEY: ${file(./config.yml):STRIPE_SECRET_KEY}
    SEND_CONFIRMATION_URL: !Ref sendConfirmationEmailQueue
    CONFIRMATION_TEMPLATE_NAME: eCommerce-confirmation-template
    CONFIGURATION_SET_NAME: eCommerce-fakeShop-configurationSet

functions:
  createUser:
    handler: createUser/index.handler
    role: 
      Fn::GetAtt:
        - createUserRole
        - Arn
    events:
      - http:
          path: users
          method: post
          cors: true

  loginUser:
    handler: loginUser/index.handler
    role: 
      Fn::GetAtt:
        - loginUserRole
        - Arn
    events:
      - http:
          path: login
          method: post
          cors: true

  getProducts:
    handler: getProductsForSale/index.handler
    role: 
      Fn::GetAtt:
        - queryItemRole
        - Arn
    events:
      - http:
          path: products
          method: get
          cors: true

  updateCartItem:
    handler: updateCartItem/index.handler
    role: 
      Fn::GetAtt:
        - updateItemRole
        - Arn
    events:
      - http:
          path: cartItems/{productId}
          method: put
          cors: true

  getCartItems:
    handler: getCartItems/index.handler
    role: 
      Fn::GetAtt:
        - queryItemRole
        - Arn
    events:
      - http:
          path: cartItems/
          method: get
          cors: true

  deleteCartItem:
    handler: deleteCartItem/index.handler
    role: 
      Fn::GetAtt:
        - deleteItemRole
        - Arn
    events:
      - http:
          path: cartItems/{productId}
          method: delete
          cors: true

  clearCartItems:
    handler: clearCartItems/index.handler
    role: 
      Fn::GetAtt:
        - batchDeleteRole
        - Arn
    events:
      - http:
          path: cartItems
          method: delete
          cors: true

  createOrder:
    handler: createOrder/index.handler
    role: 
      Fn::GetAtt:
        - processNewOrderRole
        - Arn
    events:
      - http:
          path: orders
          method: post
          cors: true

  sendEmailConfirmation:
    handler: sendEmailConfirmation/index.handler
    role: 
      Fn::GetAtt:
        - sendEmailRole
        - Arn
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - sendConfirmationEmailQueue
              - Arn

  processFailedEmail:
    handler: processFailedEmail/index.handler
    role: 
      Fn::GetAtt:
        - processFailedEmailRole
        - Arn
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - failedEmailQueue
              - Arn

resources:
  Resources:

    userTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERPOOL_TABLE_NAME}
        AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1 
    
    eCommerceTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.ECOMMERCE_TABLE_NAME}
        AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    sendConfirmationEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: sendConfirmationEmailQueue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'confirmationEmailDLQ'
              - 'Arn'
          maxReceiveCount: 5
    confirmationEmailDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: confirmationEmailDLQ
    
    failedEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: failedEmailQueue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'failedEmailDLQ'
              - 'Arn'
          maxReceiveCount: 5
    failedEmailDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: failedEmailDLQ

    bouncesAndComplaintsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: bouncesAndComplaintsTopic
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt failedEmailQueue.Arn


##IAM ROLES AND POLICIES
############################################
    sqsFailedEmailPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref failedEmailQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 'sqs:SendMessage'
              Resource: !GetAtt failedEmailQueue.Arn
              Effect: 'Allow'
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref bouncesAndComplaintsTopic
              Principal:
                Service: 'sns.amazonaws.com'

    createItemRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: createItemRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-createItem
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'            
    
    queryItemRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: queryItemRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-queryItem
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    updateItemRole:
          Type: AWS::IAM::Role
          Properties:
            RoleName: updateItemRole
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Policies:
              - PolicyName: Policy-updateItem
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: 'Allow'
                      Action:
                        - dynamodb:UpdateItem
                      Resource:
                        Fn::GetAtt:
                          - eCommerceTable
                          - Arn
                    - Effect: Allow
                      Action:
                        - logs:CreateLogGroup
                        - logs:CreateLogStream
                        - logs:PutLogEvents
                      Resource:
                        - 'Fn::Join':
                            - ':'
                            - - 'arn:aws:logs'
                              - Ref: 'AWS::Region'
                              - Ref: 'AWS::AccountId'
                              - 'log-group:/aws/lambda/*:*:*'

    getItemRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: getItemRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-getItem
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:GetItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    deleteItemRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: deleteItemRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-deleteItem
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:DeleteItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    batchDeleteRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: batchDeleteRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-batchDelete
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:DeleteItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    loginUserRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: loginUserRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-loginUser
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:GetItem
                  Resource:
                    Fn::GetAtt:
                      - userTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    createUserRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: createUserRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-createUser
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - dynamodb:GetItem
                  Resource:
                    Fn::GetAtt:
                      - userTable
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt:
                      - userTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    sendEmailRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sendEmailRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-sendEmailRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - sendConfirmationEmailQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - ses:SendTemplatedEmail
                  Resource: arn:aws:ses:ca-central-1:815127904764:*
                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    processFailedEmailRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: processFailedEmailRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-processFailedEmailRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - failedEmailQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                          
    processNewOrderRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: processNewOrderRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-processNewOrderRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource: 
                    Fn::GetAtt:
                      - sendConfirmationEmailQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt:
                      - eCommerceTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
